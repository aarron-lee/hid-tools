# vim: set expandtab shiftwidth=2 tabstop=8 textwidth=0:

.templates_sha: &template_sha 976b2e1ed25998fe36f90fc8bb72fe2acbab405b # see https://docs.gitlab.com/ee/ci/yaml/#includefile

include:
  # Fedora container builder template
  - project: 'freedesktop/ci-templates'
    ref: *template_sha
    file:
      - '/templates/fedora.yml'

variables:
  PYTHON_VERSION: '3.9'
  PYTHON: python$PYTHON_VERSION
  PIP: pip$PYTHON_VERSION
  TEST_PACKAGES: '$PYTHON make black pandoc jq systemd-udev libevdev'
  TEST_EXEC: >  # multi-line yaml that replaces new lines by spaces
    $PYTHON -m ensurepip --upgrade;
    $PYTHON -m pip install --upgrade pip;
    $PIP install attrs \
                 parse \
                 pyudev \
                 pypandoc \
                 pytest \
                 libevdev \
                 click \
                 pyyaml \
                 pytest-retry \
                 pytest_tap \
                 pytest-xdist \
                 typing_extensions
  BUILD_PACKAGES: >
    file
    git-core
    gcc
    gcc-c++
    diffutils
    make
    flex
    bison
    sparse
    bc
    xz
    findutils
    hostname
    elfutils-libelf-devel
    openssl-devel
    perl-Term-ANSIColor
    perl-Encode
    jq
  FDO_DISTRIBUTION_VERSION: 38
  FDO_UPSTREAM_REPO: 'libevdev/hid-tools'
  TEST_CONTAINER_TAG: '2023-05-25.1'
  BUILD_CONTAINER_TAG: '2023-05-25.1'
  FDO_DISTRIBUTION_TAG: $TEST_CONTAINER_TAG
  KERNEL_VERSION: '6.3'

stages:
  - sanity check
  - prep
  - build
  - test
  - analysis

fail-if-fork-is-not-public:
  stage: sanity check
  script:
    - |
      if [ $CI_PROJECT_VISIBILITY != "public" ]; then
           echo "*************************************************************************************"
           echo "Project visibility must be set to 'public'"
           echo "Change this in $CI_PROJECT_URL/edit under 'Visibility, project features, permissions'"
           echo "*************************************************************************************"
           exit 1
      fi
  except:
    - main@libevdev/hid-tools
    - master@libevdev/hid-tools

test container prep:
  extends:
    - .fdo.container-build@fedora
  stage: prep
  variables:
    GIT_STRATEGY: none
    FDO_DISTRIBUTION_PACKAGES: $TEST_PACKAGES
    FDO_DISTRIBUTION_EXEC: $TEST_EXEC
.build_variables:
  variables:
    FDO_DISTRIBUTION_TAG: $BUILD_CONTAINER_TAG
    FDO_DISTRIBUTION_PACKAGES: $BUILD_PACKAGES
    FDO_REPO_SUFFIX: build-kernel

.b2c_kernel_url:
  before_script: &b2c-kernel-url
    - export KERNEL_URL=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/kernel-$(arch)/v$KERNEL_VERSION/bzImage

build container prep:
  extends:
    - .fdo.container-build@fedora
    - .build_variables
  stage: prep
  variables:
    GIT_STRATEGY: none

rebuild kernel:
  extends:
    - .fdo.suffixed-image@fedora
    - .build_variables
  stage: build
  needs:
    - build container prep
  script:
    - echo -e "section_start:`date +%s`:check\r\e[0KCheck for existing bzImage"
    - *b2c-kernel-url
    - echo $KERNEL_URL
    - |
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" -LO $KERNEL_URL

    # the kernel is already published, abort
    # -> if the file type is not 'kernel', file|grep
    # is true, otherwise, exit 0
    - file bzImage | grep -v kernel || exit 0

    - echo -e "section_end:`date +%s`:check\r\e[0K"

    - echo -e "section_start:`date +%s`:download\r\e[0KDownload and unpack kernel sources"
    - curl -LO https://cdn.kernel.org/pub/linux/kernel/v${KERNEL_VERSION/.*/}.x/linux-${KERNEL_VERSION}.tar.xz

    - tar xf linux-${KERNEL_VERSION}.tar.xz
    - echo -e "section_end:`date +%s`:download\r\e[0K"

    - cd linux-${KERNEL_VERSION}

    - echo -e "section_start:`date +%s`:build[collapsed=true]\r\e[0KBuild the kernel"
    - ../.gitlab-ci/make-config.sh

    - make -j${FDO_CI_CONCURRENT:-4} bzImage
    - echo -e "section_end:`date +%s`:build\r\e[0K"

    - echo -e "section_start:`date +%s`:upload\r\e[0KUpload the kernel"
    - |
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" \
           --upload-file ./arch/$(arch)/boot/bzImage\
           $KERNEL_URL | tee upload.txt

    # check that the upload was successful
    - grep '201 Created' upload.txt
    - echo -e "section_end:`date +%s`:upload\r\e[0K"

.default_image:
  extends:
    - .fdo.distribution-image@fedora
  needs:
    - test container prep

python formatting:
  extends: .default_image
  stage: build
  script:
    - black --check .

install:
  extends: .default_image
  stage: build
  script:
    - $PYTHON setup.py install

install_no_man_pages:
  extends: .default_image
  stage: build
  script:
    - dnf remove -y pandoc
    - $PIP uninstall -y pypandoc
    - $PYTHON setup.py install

pytest:
  extends:
    - .fdo.b2c-image@fedora
  tags:
    - kvm
  stage: test
  needs:
    - python formatting
    - rebuild kernel
  script:
    - *b2c-kernel-url
    - export B2C_KERNEL=$KERNEL_URL

    - echo "[pytest]" > pytest.ini
    - echo "junit_family=xunit2" >> pytest.ini
    - export B2C_COMMAND="pytest -v --udevd --junitxml=junit-$CI_JOB_NAME.xml --retries 2"
    - rm -f junit-$CI_JOB_NAME.xml
    - set +e # Disable exit on error
    - /app/boot2container ; echo $? > .exit_code
    - set -e # Re-enable exit on error
    - cat '.exit_code'
    # pytest uses 2 and above for any errors outside the tests themselves
    - if [[ `cat .exit_code` -gt 1 ]] ;
      then
        exit 1 ;
      fi
  artifacts:
    name: "qemu-pytest-logs-$CI_JOB_NAME"
    when: always
    expire_in: 1 week
    paths:
      - junit-*.xml
    reports:
      junit: junit-*.xml

pytest errors:
  extends:
    - .fdo.distribution-image@fedora
  stage: analysis
  needs:
    - pytest
  script:
    - $PIP install yq
    - errors=`cat junit-*.xml | xq -r '.testsuites.testsuite."@errors"'`
    - test $errors -ne 0 && echo "pytest encountered $errors errors, please fix"
    - echo "See the previous stage for test logs"
    - exit $errors
  allow_failure: false

pytest failures:
  extends:
    - .fdo.distribution-image@fedora
  stage: analysis
  needs:
    - pytest
  script:
    - $PIP install yq
    - failures=`cat junit-*.xml | xq -r '.testsuites.testsuite."@failures"'`
    - test $failures -ne 0 && echo "pytest encountered $failures test case failures"
    - echo "See the previous stage for test logs"
    - exit $failures
  allow_failure: true
